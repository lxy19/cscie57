package edu.lix8.spring.hibernate.domain;

import javax.persistence.*;
import java.io.Serializable;

@MappedSuperclass
public class AbstractEntity implements Serializable {

    /**
     @Id means itâ€™s the primary key of the object. Hibernate will use it as the unique
     identifier when managing the contact entity instances within its session. Additionally,
     the @GeneratedValue annotation tells Hibernate how the id value was generated.
     The IDENTITY strategy means that the id value was generated by the back end during insert.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(updatable = false)
    protected Integer id;


    /**
     * Returns the entity identifier. This identifier is unique per entity. It is used by persistence
     * frameworks used in a project, and although is public, it should not be used by application code.
     * This identifier is mapped by ORM (Object Relational Mapper) to the database primary key of the Person
     * record to which the entity instance is mapped.
     *
     * @return the unique entity identifier
     */
    public Integer getId() {
        return id;
    }

    /**
     * Sets the entity identifier. This identifier is unique per entity.  Is is used by persistence frameworks
     * and although is public, it should never be set by application code.
     *
     * @param id the unique entity identifier
     */
    public void setId(Integer id) {
        this.id = id;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o)
            return true;
        if (o == null || getClass() != o.getClass())
            return false;
        AbstractEntity that = (AbstractEntity) o;
        if (id != null ? !id.equals(that.id) : that.id != null)
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        return id != null ? id.hashCode() : 0;
    }
}
